FROM isprasmvg/ubuntu:base

# Install required packages for Utopa EDA

RUN apt update && apt install -y autoconf bison clang clang-tidy doxygen flex \
    g++ gcc gcovr git graphviz gtkwave iverilog lcov libctemplate-dev libfmt-dev \
    liblpsolve55-dev libssl-dev libtool lld make ninja-build pkg-config \
    python3 rlwrap tcl-dev zlib1g zlib1g-dev

# Install CMake of proper version

RUN apt install -y wget tar

WORKDIR /workdir
RUN wget https://cmake.org/files/v3.28/cmake-3.28.1.tar.gz
RUN tar xzf cmake-3.28.1.tar.gz
RUN rm -rf cmake-3.28.1.tar.gz
WORKDIR /workdir/cmake-3.28.1
RUN ./bootstrap
RUN make -j$(nproc)
RUN make install

# Install CUDD library

WORKDIR /workdir
RUN git clone https://github.com/ivmai/cudd
WORKDIR /workdir/cudd
RUN touch aclocal.m4 Makefile.am Makefile.in configure
RUN ./configure --enable-obj --enable-shared
RUN make -j$(nproc)
RUN make install

# Install STACCATO library

WORKDIR /workdir
RUN git clone https://github.com/ispras/staccato
WORKDIR /workdir/staccato
RUN make BUILD_TYPE=shared CUDD_INCLUDE=/workdir/cudd SM="-DDISABLE_SM" -j$(nproc)
RUN make install

# Install Yosys tool & library

RUN apt install -y build-essential bison gawk libboost-system-dev \
    libboost-python-dev libboost-filesystem-dev libffi-dev libreadline-dev xdot

WORKDIR /workdir
RUN git clone https://github.com/YosysHQ/yosys.git
ENV Yosys_ROOT="/workdir/yosys"
WORKDIR ${Yosys_ROOT}
RUN git checkout yosys-0.36
RUN git submodule init
RUN git submodule update
ENV old_line="ENABLE_LIBYOSYS := 0"
ENV new_line="ENABLE_LIBYOSYS := 1"
ENV file_path="Makefile"
RUN sed -i "s|$old_line|$new_line|" "$file_path"
RUN make -j$(nproc)
RUN make install

# Install LLVM/MLIR & CIRCT

ENV circt_version="1.72.0"
ENV circt_archive="circt-full-shared-linux-x64.tar.gz"
ENV circt_url="https://github.com/llvm/circt/releases/download/firtool-$circt_version/$circt_archive"
ENV circt_dir="firtool-${circt_version}"
ENV mlir_targets="lib/cmake/mlir/MLIRTargets.cmake"
WORKDIR /workdir
RUN wget ${circt_url}
RUN tar xzf ${circt_archive}
RUN sed -i 's'/\
'foreach(_target "LLVMSupport" "LLVMCore" "LLVMMC" "LLVMTarget" "LLVMAsmParser" "LLVMBinaryFormat" '\
'"LLVMBitReader" "LLVMBitWriter" "LLVMFrontendOpenMP" "LLVMTransformUtils" "LLVMTargetParser" "LLVMIRReader" '\
'"LLVMipo" "LLVMLinker" "LLVMPasses" "LLVMMCParser" "LLVMLineEditor" "LLVMTableGen" "LLVMCoroutines" "LLVMExecutionEngine" '\
'"LLVMObject" "LLVMOrcJIT" "LLVMJITLink" "LLVMAnalysis" "LLVMAggressiveInstCombine" "LLVMInstCombine" "LLVMScalarOpts" '\
'"LLVMVectorize" "LLVMX86CodeGen" "LLVMX86Desc" "LLVMX86Info" "LLVMX86AsmParser" "LLVMX86Disassembler" "CIRCTAffineToLoopSchedule" '\
'"CIRCTArcToLLVM" "CIRCTCalyxToFSM" "CIRCTCalyxToHW" "CIRCTCalyxNative" "CIRCTCombToArith" "CIRCTCombToLLVM" "CIRCTCombToSMT" '\
'"CIRCTConvertToArcs" "CIRCTDCToHW" "CIRCTExportChiselInterface" "CIRCTExportVerilog" "CIRCTFIRRTLToHW" "CIRCTFSMToSV" '\
'"CIRCTHandshakeToDC" "CIRCTHandshakeToHW" "CIRCTHWArithToHW" "CIRCTHWToLLHD" "CIRCTHWToLLVM" "CIRCTHWToBTOR2" "CIRCTHWToSMT" '\
'"CIRCTHWToSV" "CIRCTHWToSystemC" "CIRCTLLHDToLLVM" "CIRCTLoopScheduleToCalyx" "CIRCTMooreToCore" "CIRCTPipelineToHW" "CIRCTSCFToCalyx" '\
'"CIRCTSeqToSV" "CIRCTSimToSV" "CIRCTCFToHandshake" "CIRCTVerifToSMT" "CIRCTVerifToSV" "CIRCTExportFIRRTL" "CIRCTComb" '\
'"CIRCTCombTransforms" "CIRCTDebug" "CIRCTESI" "CIRCTFIRRTL" "CIRCTImportFIRFile" "CIRCTMSFT" "CIRCTMSFTTransforms" "CIRCTHW" '\
'"CIRCTLLHD" "CIRCTMoore" "CIRCTOM" "CIRCTOMEvaluator" "CIRCTSeq" "CIRCTSeqTransforms" "CIRCTSV" "CIRCTSVTransforms" "CIRCTFSM" '\
'"CIRCTFSMTransforms" "CIRCTHandshake" "CIRCTHandshakeTransforms" "CIRCTHWArith" "CIRCTVerif" "CIRCTLTL" "CIRCTEmit" "CIRCTFirtool" )'\
/\
'foreach(_target "LLVMSupport" "LLVMCore" "LLVMMC" "LLVMTarget" "LLVMAsmParser" "LLVMBinaryFormat" "LLVMBitReader" "LLVMBitWriter" '\
'"LLVMFrontendOpenMP" "LLVMTransformUtils" "LLVMTargetParser" "LLVMIRReader" "LLVMipo" "LLVMLinker" "LLVMPasses" "LLVMMCParser" '\
'"LLVMLineEditor" "LLVMTableGen" "LLVMCoroutines" "LLVMExecutionEngine" "LLVMObject" "LLVMOrcJIT" "LLVMJITLink" "LLVMAnalysis" '\
'"LLVMAggressiveInstCombine" "LLVMInstCombine" "LLVMScalarOpts" "LLVMVectorize" "LLVMX86CodeGen" "LLVMX86Desc" "LLVMX86Info" '\
'"LLVMX86AsmParser" "LLVMX86Disassembler")/' "/workdir/${circt_dir}/${mlir_targets}"
ENV CIRCT_DIR="/workdir/${circt_dir}/lib/cmake/circt"
ENV MLIR_DIR="/workdir/${circt_dir}/lib/cmake/mlir"

# Install Valgrind

WORKDIR /workdir/
RUN git clone https://sourceware.org/git/valgrind.git
WORKDIR /workdir/valgrind/
RUN git checkout VALGRIND_3_23_0
ENV old_line1="   if (req_alignB > 16 \* 1024 \* 1024) {"
ENV new_line1="   if (req_alignB > 1024 * 1024 * 1024) {"
ENV old_line2="                  a, req_alignB, req_pszB, req_alignB, 16 \* 1024 \* 1024 );"
ENV new_line2="                  a, req_alignB, req_pszB, req_alignB, 1024 * 1024 * 1024 );"
ENV path="/workdir/valgrind/coregrind/m_mallocfree.c"
RUN sed -i "s|$old_line1|$new_line1|" "$path"
RUN sed -i "s|$old_line2|$new_line2|" "$path"
RUN ./autogen.sh
RUN ./configure
RUN make
RUN make install

# Set up debug info

RUN echo export DEBUGINFOD_URLS="https://debuginfod.archlinux.org" >> ~/.bashrc
