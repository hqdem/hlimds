FROM isprasmvg/ubuntu:base

# Install required packages for Utopa EDA

RUN apt update && apt install -y autoconf bison clang clang-tidy flex g++ gcc \
    git graphviz gtkwave iverilog lcov liblpsolve55-dev libssl-dev libtool lld \
    make ninja-build pkg-config python3 zlib1g zlib1g-dev

# Install CMake of proper version

RUN apt install -y wget tar

WORKDIR /workdir
RUN wget https://cmake.org/files/v3.28/cmake-3.28.1.tar.gz
RUN tar xzf cmake-3.28.1.tar.gz
RUN rm -rf cmake-3.28.1.tar.gz
WORKDIR /workdir/cmake-3.28.1
RUN ./bootstrap
RUN make -j$(nproc)
RUN make install

# Install C++ CTemplate library

WORKDIR /workdir
RUN git clone https://github.com/OlafvdSpek/ctemplate.git
WORKDIR /workdir/ctemplate
RUN ./autogen.sh
RUN ./configure --prefix=/usr
RUN make -j$(nproc)
RUN make install

# Install CUDD library

WORKDIR /workdir
RUN git clone https://github.com/ivmai/cudd
WORKDIR /workdir/cudd
RUN touch aclocal.m4 Makefile.am Makefile.in configure
RUN ./configure --enable-obj --enable-shared
RUN make -j$(nproc)
RUN make install

# Install STACCATO library

WORKDIR /workdir
RUN git clone https://github.com/ispras/staccato
WORKDIR /workdir/staccato
RUN make BUILD_TYPE=shared CUDD_INCLUDE=/workdir/cudd SM="-DDISABLE_SM" -j$(nproc)
RUN make install

# Install Yosys tool & library

RUN apt install -y build-essential bison gawk libboost-system-dev \
    libboost-python-dev libboost-filesystem-dev libffi-dev libreadline-dev \
    tcl-dev xdot

WORKDIR /workdir
RUN git clone https://github.com/YosysHQ/yosys.git
WORKDIR /workdir/yosys
RUN git checkout yosys-0.36
RUN git submodule init
RUN git submodule update
ENV old_line="ENABLE_LIBYOSYS := 0"
ENV new_line="ENABLE_LIBYOSYS := 1"
ENV file_path="Makefile"
RUN sed -i "s|$old_line|$new_line|" "$file_path"
RUN make -j$(nproc)
RUN make install

# Install LLVM/MLIR & CIRCT

WORKDIR /workdir
RUN git clone https://github.com/circt/circt.git
WORKDIR /workdir/circt
RUN git checkout firtool-1.72.0
RUN git submodule init
RUN git submodule update
ENV MLIR_DIR=/workdir/circt/llvm/build/lib/cmake/mlir/
RUN mkdir llvm/build
WORKDIR /workdir/circt/llvm/build
RUN cmake -G Ninja ../llvm \
    -DLLVM_ENABLE_PROJECTS="mlir;clang;clang-tools-extra;lld" \
    -DLLVM_TARGETS_TO_BUILD="X86" \
    -DCMAKE_BUILD_TYPE="Release" \
    -DLLVM_ENABLE_ASSERTIONS=ON \
    -DCMAKE_C_COMPILER=clang \
    -DCMAKE_CXX_COMPILER=clang++ \
    -DLLVM_ENABLE_LLD=ON \
    -DLLVM_PARALLEL_LINK_JOBS=$(nproc) \
    -DLLVM_PARALLEL_COMPILE_JOBS=$(nproc)
RUN ninja

ENV PATH=/workdir/circt/build/bin:/workdir/circt/llvm/build/bin:$PATH
ENV CIRCT_DIR=/workdir/circt/
WORKDIR /workdir/circt
RUN mkdir build
WORKDIR /workdir/circt/build
RUN cmake -G Ninja .. \
    -DCMAKE_BUILD_TYPE="Release" \
    -DLLVM_ENABLE_ASSERTIONS=ON \
    -DMLIR_DIR=$PWD/../llvm/build/lib/cmake/mlir \
    -DLLVM_DIR=$PWD/../llvm/build/lib/cmake/llvm \
    -DCMAKE_C_COMPILER=clang \
    -DCMAKE_CXX_COMPILER=clang++ \
    -DVERILATOR_DISABLE=ON \
    -DIVERILOG_DISABLE=ON
RUN ninja

# Install Valgrind

WORKDIR /workdir/
RUN git clone https://sourceware.org/git/valgrind.git
WORKDIR /workdir/valgrind/
RUN git checkout VALGRIND_3_23_0
ENV old_line1="   if (req_alignB > 16 \* 1024 \* 1024) {"
ENV new_line1="   if (req_alignB > 1024 * 1024 * 1024) {"
ENV old_line2="                  a, req_alignB, req_pszB, req_alignB, 16 \* 1024 \* 1024 );"
ENV new_line2="                  a, req_alignB, req_pszB, req_alignB, 1024 * 1024 * 1024 );"
ENV path="/workdir/valgrind/coregrind/m_mallocfree.c"
RUN sed -i "s|$old_line1|$new_line1|" "$path"
RUN sed -i "s|$old_line2|$new_line2|" "$path"
RUN ./autogen.sh
RUN ./configure
RUN make
RUN make install

# Set up debug info

RUN echo export DEBUGINFOD_URLS="https://debuginfod.archlinux.org" >> ~/.bashrc
